{"version":3,"sources":["webpack:///./src/pages/trader-tools/margin-calculator/_margin-calculator.js","webpack:///./src/pages/trader-tools/margin-calculator/index.js"],"names":["MarginCalculator","data","useStaticQuery","useState","tab","setTab","onTabClick","toFixed","val","parseFloat","toLocaleString","numberSubmitFormat","input","replace","jc","ai","to","color","localize","src","RightArrow","alt","height","width","style","margin","direction","as","type","align","weight","mt","mb","enableReinitialize","initialValues","accountType","marginSymbol","symbol","volume","assetPrice","leverage","optionList","syntheticItemLists","contractSize","validate","values","errors","symbol_error","validation","volume_error","assetPrice_error","leverage_error","onSubmit","setFieldValue","margin_formula","name","getMargin","setFieldError","setFieldTouched","handleBlur","touched","setErrors","resetForm","isValid","dirty","htmlFor","toString","numberWithCommas","tablet","active","onClick","disabled","financialItemLists","option_list","label","default_option","optionItemDefault","selected_option","id","onChange","value","currency","market","display_name","slice","getContractSize","error","onBlur","autocomplete","field","autoComplete","handleError","current_input","focus","maxLength","background","leverageItemLists","data-lpignore","secondary","translate_text","components","key","has_single_state","header","header_style","item_style","plus","Desktop","Mobile","margin_formula_mobile","tertiary","is_deriv_app_link","external","target","rel","WithIntl","title","description"],"mappings":"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","file":"component---src-pages-trader-tools-margin-calculator-index-js-454c07bc6b78d6418ead.js","sourcesContent":["import React, { useState } from 'react'\nimport { Formik, Field } from 'formik'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport {\n    optionItemDefault,\n    leverageItemLists,\n    syntheticItemLists,\n    financialItemLists,\n} from '../common/_underlying-data'\nimport {\n    BreadCrumbContainer,\n    CalculateButton,\n    CalculatorBody,\n    CalculatorDropdown,\n    CalculatorForm,\n    CalculatorHeader,\n    CalculatorLabel,\n    CalculatorOutputContainer,\n    CalculatorOutputField,\n    CalculatorOutputSymbol,\n    CalculatorTabItem,\n    ContentContainer,\n    FormulaText,\n    FormWrapper,\n    header_style,\n    InputGroup,\n    item_style,\n    LinkWrapper,\n    RightContent,\n    SectionSubtitle,\n    StyledLinkButton,\n    StyledOl,\n    StyledSection,\n} from '../common/_style'\nimport validation from '../common/_validation'\nimport { localize, Localize } from 'components/localization'\nimport { Flex, Show } from 'components/containers'\nimport {\n    Accordion,\n    AccordionItem,\n    Dropdown,\n    Header,\n    LocalizedLinkText,\n    QueryImage,\n    Text,\n} from 'components/elements'\nimport Input from 'components/form/input'\nimport RightArrow from 'images/svg/black-right-arrow.svg'\n\nconst MarginCalculator = () => {\n    const query = graphql`\n        query {\n            margin_formula: file(relativePath: { eq: \"trade-tools/margin-formula.png\" }) {\n                ...fadeIn\n            }\n            margin_info: file(relativePath: { eq: \"trade-tools/margin-info.png\" }) {\n                ...fadeIn\n            }\n            margin_formula_mobile: file(\n                relativePath: { eq: \"trade-tools/margin-formula-mobile.png\" }\n            ) {\n                ...fadeIn\n            }\n        }\n    `\n    const data = useStaticQuery(query)\n\n    const [tab, setTab] = useState('Synthetic')\n\n    const onTabClick = (tab) => {\n        setTab(tab)\n    }\n\n    const getMargin = (values) => {\n        const { symbol, volume, assetPrice, leverage, contractSize } = values\n        let margin_formula\n        const STEPINDEX_VALUE = 100\n        const RANGEBREAK100VALUE = 400\n        const RANGEBREAK200VALUE = 800\n\n        if (symbol.name === 'Step Index') {\n            margin_formula = volume * STEPINDEX_VALUE\n        } else if (symbol.name === 'Range Break 100 Index') {\n            margin_formula = volume * RANGEBREAK100VALUE\n        } else if (symbol.name === 'Range Break 200 Index') {\n            margin_formula = volume * RANGEBREAK200VALUE\n        } else {\n            margin_formula = (volume * contractSize * assetPrice) / leverage.name\n        }\n\n        return toFixed(margin_formula)\n    }\n\n    const toFixed = (val) => {\n        return parseFloat(val.toFixed(3)).toLocaleString()\n    }\n\n    const resetValidation = (values) => {\n        const errors = {}\n        const symbol_error = validation.symbol(values.symbol)\n        const volume_error = validation.volume(values.volume)\n        const assetPrice_error = validation.assetPrice(values.assetPrice)\n        const leverage_error = validation.leverage(values.leverage)\n\n        if (symbol_error) {\n            errors.symbol = symbol_error\n        }\n        if (volume_error) {\n            errors.volume = volume_error\n        }\n        if (assetPrice_error) {\n            errors.assetPrice = assetPrice_error\n        }\n        if (leverage_error) {\n            errors.leverage = leverage_error\n        }\n\n        return errors\n    }\n\n    const getMarginCurrency = (symbol) => {\n        let currency = 'USD'\n        if (symbol.market === 'synthetic_indices' || symbol.market === 'commodities') {\n            currency = 'USD'\n        }\n\n        if (symbol.name === 'DAX_30') {\n            currency = 'EUR'\n        }\n\n        if (symbol.market === 'forex' && symbol.name !== 'default' && symbol.name !== 'CL_BRENT') {\n            currency = symbol.display_name.slice(-3)\n        }\n\n        return currency\n    }\n\n    const getContractSize = (symbol) => {\n        let contractSize = 1 //crypto falls into this contract size\n\n        if (symbol.market === 'forex') {\n            contractSize = 100000\n        }\n\n        if (symbol.market === 'commodities') {\n            switch (symbol.name) {\n                case 'XAGUSD':\n                    contractSize = 5000\n                    break\n                case 'XAUUSD':\n                case 'XPDUSD':\n                case 'XPTUSD':\n                    contractSize = 100\n                    break\n            }\n        }\n\n        if (symbol.name === 'Step Index') {\n            contractSize = 10\n        }\n\n        if (symbol.market === 'smartfx') {\n            contractSize = 100\n        }\n\n        return contractSize\n    }\n\n    const numberWithCommas = (input) => {\n        return input.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n    }\n\n    const numberSubmitFormat = (input) => {\n        return input.replace(/^0+(?!\\.|$)/, '')\n    }\n\n    return (\n        <>\n            <BreadCrumbContainer>\n                <Flex jc=\"flex-start\" ai=\"center\">\n                    <LocalizedLinkText to=\"/trader-tools\" color=\"grey-5\">\n                        {localize(\"Traders' tools\")}\n                    </LocalizedLinkText>\n                    <img\n                        src={RightArrow}\n                        alt={localize('right arrow')}\n                        height=\"16\"\n                        width=\"16\"\n                        style={{ margin: '0 8px' }}\n                    />\n                    <Text>{localize('Margin calculator')}</Text>\n                </Flex>\n            </BreadCrumbContainer>\n            <StyledSection direction=\"column\">\n                <SectionSubtitle as=\"h3\" type=\"sub-section-title\" align=\"center\" weight=\"normal\">\n                    {localize(\n                        'Our margin calculator helps you to estimate the margin required to keep your positions open overnight on Deriv MetaTrader 5 (DMT5).',\n                    )}\n                </SectionSubtitle>\n\n                <ContentContainer mt=\"8rem\" mb=\"4rem\">\n                    <FormWrapper>\n                        <Formik\n                            enableReinitialize\n                            initialValues={{\n                                accountType: 'Synthetic',\n                                margin: 0,\n                                marginSymbol: 'USD',\n                                symbol: '',\n                                volume: '',\n                                assetPrice: '',\n                                leverage: '',\n                                optionList: syntheticItemLists,\n                                contractSize: '',\n                            }}\n                            validate={resetValidation}\n                            onSubmit={(values, { setFieldValue }) => {\n                                setFieldValue('margin', getMargin(values))\n                                setFieldValue('volume', numberSubmitFormat(values.volume))\n                                setFieldValue('assetPrice', numberSubmitFormat(values.assetPrice))\n                            }}\n                        >\n                            {({\n                                values,\n                                setFieldValue,\n                                setFieldError,\n                                setFieldTouched,\n                                handleBlur,\n                                errors,\n                                touched,\n                                setErrors,\n                                resetForm,\n                                isValid,\n                                dirty,\n                            }) => (\n                                <CalculatorForm>\n                                    <CalculatorHeader>\n                                        <CalculatorLabel htmlFor=\"message\">\n                                            {localize('Margin required')}\n                                        </CalculatorLabel>\n                                        <CalculatorOutputContainer>\n                                            <CalculatorOutputField>\n                                                {numberWithCommas(values.margin)}\n                                            </CalculatorOutputField>\n                                            <CalculatorOutputSymbol>\n                                                {values.marginSymbol}\n                                            </CalculatorOutputSymbol>\n                                        </CalculatorOutputContainer>\n                                    </CalculatorHeader>\n\n                                    <CalculatorBody>\n                                        <CalculatorLabel>\n                                            {localize('Account type')}\n                                        </CalculatorLabel>\n                                        <Flex\n                                            mb=\"3rem\"\n                                            mt=\"1rem\"\n                                            jc=\"space-between\"\n                                            tablet={{ height: 'unset' }}\n                                        >\n                                            <CalculatorTabItem\n                                                active={tab === 'Synthetic'}\n                                                onClick={() => {\n                                                    onTabClick('Synthetic')\n                                                    setErrors({})\n                                                    resetForm({})\n                                                }}\n                                            >\n                                                <Text align=\"center\">{localize('Synthetic')}</Text>\n                                            </CalculatorTabItem>\n                                            <CalculatorTabItem\n                                                active={tab === 'Financial'}\n                                                disabled={tab === 'Financial'}\n                                                onClick={() => {\n                                                    onTabClick('Financial')\n                                                    setErrors({})\n                                                    resetForm({})\n                                                    setFieldValue('accountType', 'Financial')\n                                                    setFieldValue('optionList', financialItemLists)\n                                                }}\n                                            >\n                                                <Text align=\"center\">{localize('Financial')}</Text>\n                                            </CalculatorTabItem>\n                                        </Flex>\n\n                                        <CalculatorDropdown\n                                            option_list={values.optionList}\n                                            label={localize('Symbol')}\n                                            default_option={optionItemDefault}\n                                            selected_option={values.symbol}\n                                            id=\"symbol\"\n                                            onChange={(value) => {\n                                                setFieldValue(\n                                                    'marginSymbol',\n                                                    getMarginCurrency(value),\n                                                )\n                                                setFieldValue(\n                                                    'contractSize',\n                                                    getContractSize(value),\n                                                )\n                                                setFieldValue('symbol', value)\n                                            }}\n                                            error={touched.symbol && errors.symbol}\n                                            onBlur={handleBlur}\n                                            autocomplete=\"off\"\n                                            contractSize={values.contractSize}\n                                        />\n\n                                        <InputGroup>\n                                            <Field\n                                                name=\"volume\"\n                                                value={values.volume}\n                                                onChange={(value) => {\n                                                    setFieldValue('volume', value)\n                                                }}\n                                            >\n                                                {({ field }) => (\n                                                    <Input\n                                                        {...field}\n                                                        id=\"volume\"\n                                                        type=\"text\"\n                                                        label={localize('Volume')}\n                                                        autoComplete=\"off\"\n                                                        error={touched.volume && errors.volume}\n                                                        onBlur={handleBlur}\n                                                        handleError={(current_input) => {\n                                                            setFieldValue('volume', '', false)\n                                                            setFieldError('volume', '')\n                                                            setFieldTouched('volume', false, false)\n                                                            current_input.focus()\n                                                        }}\n                                                        maxLength=\"8\"\n                                                        background=\"white\"\n                                                    />\n                                                )}\n                                            </Field>\n                                        </InputGroup>\n\n                                        <InputGroup>\n                                            <Field\n                                                name=\"assetPrice\"\n                                                value={values.assetPrice}\n                                                onChange={(value) => {\n                                                    setFieldValue('assetPrice', value)\n                                                }}\n                                            >\n                                                {({ field }) => (\n                                                    <Input\n                                                        {...field}\n                                                        id=\"assetPrice\"\n                                                        type=\"text\"\n                                                        label={localize('Asset price')}\n                                                        autoComplete=\"off\"\n                                                        error={\n                                                            touched.assetPrice && errors.assetPrice\n                                                        }\n                                                        onBlur={handleBlur}\n                                                        handleError={(current_input) => {\n                                                            setFieldValue('assetPrice', '', false)\n                                                            setFieldError('assetPrice', '')\n                                                            setFieldTouched(\n                                                                'assetPrice',\n                                                                false,\n                                                                false,\n                                                            )\n                                                            current_input.focus()\n                                                        }}\n                                                        maxLength=\"15\"\n                                                        background=\"white\"\n                                                    />\n                                                )}\n                                            </Field>\n                                        </InputGroup>\n                                        <Dropdown\n                                            option_list={leverageItemLists}\n                                            id=\"leverage\"\n                                            label={localize('Leverage')}\n                                            default_option={optionItemDefault}\n                                            selected_option={values.leverage}\n                                            onChange={(value) => {\n                                                setFieldValue('leverage', value)\n                                            }}\n                                            error={touched.leverage && errors.leverage}\n                                            onBlur={handleBlur}\n                                            autoComplete=\"off\"\n                                            data-lpignore=\"true\"\n                                        />\n                                        <Flex mt=\"3rem\">\n                                            <CalculateButton\n                                                secondary\n                                                type=\"submit\"\n                                                disabled={!isValid || !dirty}\n                                            >\n                                                {localize('Calculate')}\n                                            </CalculateButton>\n                                        </Flex>\n                                    </CalculatorBody>\n                                </CalculatorForm>\n                            )}\n                        </Formik>\n                    </FormWrapper>\n\n                    <RightContent>\n                        <Header as=\"h3\" type=\"section-title\" mb=\"0.8rem\">\n                            {localize('How to calculate margin')}\n                        </Header>\n\n                        <Text>\n                            <Localize translate_text=\"The margin required for a contract on DMT5 is calculated based on the formula:\" />\n                        </Text>\n                        <Text mb=\"1.6rem\">\n                            <Localize\n                                translate_text=\"<0>Margin = (volume × contract size × asset price) ÷ leverage</0>\"\n                                components={[<strong key={0} />]}\n                            />\n                        </Text>\n\n                        <Text mb=\"1.6rem\">\n                            <Localize translate_text=\"This gives you the margin requirement in the quote currency for forex pairs, or in the denomination of the underlying asset for other instruments.\" />\n                        </Text>\n                        <Text mb=\"40px\">\n                            {localize(\n                                'For instance, if you are trading the USD/CHF forex pair, the margin requirement will be calculated in Swiss Franc (CHF) which is the quote currency. On the other hand, if you are trading Volatility Index 75,  then the margin requirement will be calculated in US Dollar (USD), which is the denomination of the underlying asset – Volatility Index 75.',\n                            )}\n                        </Text>\n\n                        <Header as=\"h3\" type=\"section-title\" mb=\"0.8rem\">\n                            {localize('Example calculation')}\n                        </Header>\n\n                        <Accordion has_single_state>\n                            <AccordionItem\n                                header={localize('Margin required')}\n                                header_style={header_style}\n                                style={item_style}\n                                plus\n                            >\n                                <Text mb=\"16px\">\n                                    {localize(\n                                        'Let’s say you want to trade two lots of EUR/USD with an asset price of 1.10 USD and leverage of 100.',\n                                    )}\n                                </Text>\n\n                                <Show.Desktop>\n                                    <QueryImage\n                                        data={data.margin_formula}\n                                        alt={localize('Margin formula')}\n                                    />\n                                </Show.Desktop>\n\n                                <Show.Mobile>\n                                    <QueryImage\n                                        data={data.margin_formula_mobile}\n                                        alt={localize('Margin formula mobile')}\n                                    />\n                                </Show.Mobile>\n\n                                <FormulaText>\n                                    <StyledOl>\n                                        <li>\n                                            <span>\n                                                <Localize translate_text=\"One standard lot of forex = 100,000 units\" />\n                                            </span>\n                                        </li>\n                                    </StyledOl>\n                                </FormulaText>\n\n                                <Text mb=\"1.6rem\" mt=\"1.6rem\">\n                                    <Localize\n                                        translate_text=\"So you will require a margin rate of <0>2,200 USD</0> to open the above position.\"\n                                        components={[<strong key={0} />]}\n                                    />\n                                </Text>\n                                <Text>\n                                    {localize(\n                                        'Note that these are approximate values only and will differ depending on the leverage that is set for your account and the asset you want to trade.',\n                                    )}\n                                </Text>\n                            </AccordionItem>\n                        </Accordion>\n\n                        <LinkWrapper height=\"auto\">\n                            <StyledLinkButton\n                                tertiary=\"true\"\n                                is_deriv_app_link\n                                to=\"/mt5\"\n                                external=\"true\"\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                {localize('Go to DMT5 dashboard')}\n                            </StyledLinkButton>\n                            <StyledLinkButton secondary=\"true\" to=\"/trade-types/margin\">\n                                {localize('Learn more about margin')}\n                            </StyledLinkButton>\n                        </LinkWrapper>\n                    </RightContent>\n                </ContentContainer>\n            </StyledSection>\n        </>\n    )\n}\n\nexport default MarginCalculator\n","import React from 'react'\nimport { Hero } from '../common/_style'\nimport MarginCalculatorSection from './_margin-calculator'\nimport { Container, SEO } from 'components/containers'\nimport { Header } from 'components/elements'\nimport { localize, WithIntl } from 'components/localization'\nimport Layout from 'components/layout/layout'\n\nconst MarginCalculator = () => {\n    return (\n        <Layout>\n            <SEO\n                title={localize('Margin Calculator')}\n                description={localize('Margin Calculator')}\n            />\n            <Hero jc=\"center\" ai=\"center\">\n                <Container>\n                    <Header as=\"h1\" type=\"display-title\" color=\"white\" align=\"center\">\n                        {localize('Margin Calculator')}\n                    </Header>\n                </Container>\n            </Hero>\n            <MarginCalculatorSection />\n        </Layout>\n    )\n}\nexport default WithIntl()(MarginCalculator)\n"],"sourceRoot":""}